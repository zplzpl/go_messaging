package logger

import (
	"go.uber.org/zap"
)

// An Option configures a Logger.
type Option interface {
	apply(*Logger)
}

// optionFunc wraps a func so it satisfies the Option interface.
type optionFunc func(*Logger)

func (f optionFunc) apply(log *Logger) {
	f(log)
}

// 增加或替换掉logger的底层核心
func WrapCore(f func(Core) Core) Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.WrapCore(f))
	})
}

// 增加调用者信息
func AddCaller() Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.AddCaller())
	})
}

// AddCallerSkip increases the number of callers skipped by caller annotation
// (as enabled by the AddCaller option). When building wrappers around the
// Logger and SugaredLogger, supplying this Option prevents zap from always
// reporting the wrapper code as the caller.
func AddCallerSkip(skip int) Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.AddCallerSkip(skip))
	})
}

// 增加调用堆栈
func AddStacktrace(lvl LevelEnabler) Option {
	return optionFunc(func(log *Logger) {
		log.addStack = lvl
	})
}

// Development puts the logger in development mode, which makes DPanic-level
// logs panic instead of simply logging an error.
func Development() Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.Development())
	})
}

// ErrorOutput sets the destination for errors generated by the Logger. Note
// that this option only affects internal errors; for sample code that sends
// error-level logs to a different location from info- and debug-level logs,
// see the package-level AdvancedConfiguration example.
//
// The supplied WriteSyncer must be safe for concurrent use. The Open and
// zapcore.Lock functions are the simplest ways to protect files with a mutex.
func ErrorOutput(w WriteSyncer) Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.ErrorOutput(w))
	})
}

// Hooks注册的函数每次写入日志时都会被调用
// 多用于一些简单的场景 比如计算指标 counter sum 之类
func Hooks(hooks ...func(Entry) error) Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.Hooks(hooks...))
	})
}

// 增加字段信息
func Fields(fs ...Field) Option {
	return optionFunc(func(log *Logger) {
		log.base = log.base.WithOptions(zap.Fields(fs...))
	})
}
